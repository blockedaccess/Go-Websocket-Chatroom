<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
          name="viewport">
    <meta content="ie=edge" http-equiv="X-UA-Compatible">
    <title>Home</title>
    <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css"
          integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" rel="stylesheet">
    <link crossorigin="anonymous" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
          integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
          referrerpolicy="no-referrer" rel="stylesheet"/>
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col">
            <h1 class="mt-3">Home</h1>
            <hr>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <h3>CHAT</h3>

            <p><a href="https://github.com">got to github</a></p>
            <div class="form-group">
                <label for="username">username</label>
                <input autocomplete="off" class="form-control" id="username" name="username" type="text">
            </div>
            <div class="form-group">
                <label for="message">message</label>
                <input autocomplete="off" class="form-control" id="message" name="message" type="text">
            </div>

            <hr>

            <a class="btn btn-outline-secondary" href="javascript:void(0);" id="sendBtn">Send</a>

            <input id="action" name="action" type="hidden">

            <div class="mt-2 float-end" id="status">

            </div>

            <div class="chatbox mt-3" id="output">


            </div>
        </div>
        <div class="col-md-4">
            <h3>Who's Online?</h3>

            <ul id="online-users"></ul>
        </div>
    </div>
</div>
</body>

<script crossorigin="anonymous"
        integrity="sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj"
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js">
</script>

<script crossOrigin="anonymous"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
        referrerpolicy="no-referrer" src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js">
</script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>

    let socket = null;
    let o = document.getElementById("output")
    let userField = document.getElementById("username")
    let messageField = document.getElementById("message")

    window.onbeforeunload = function () {
        console.log("LEAVING");
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }
    document.addEventListener("DOMContentLoaded", function () {
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {debug: true, reconnectInterval: 3000});

        const offline = `<span class="badge bg-danger"> DISCONNECTED </span>`
        const online = `<span class="badge bg-success"> CONNECTED </span>`
        let statusDiv = document.getElementById("status")


        socket.onopen = () => {
            console.log("Success");
            statusDiv.innerHTML = online;
        }

        socket.onclose = () => {
            console.log("Closed");
            statusDiv.innerHTML = offline;
        }

        socket.onerror = error => {
            console.log("ERROR");
            statusDiv.innerHTML = offline;
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data)
            console.log("Action is", data.action)

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online-users")
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(function (item) {
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li);
                        })
                    }
                    break;

                case "broadcast":
                    o.innerHTML = o.innerHTML + data.message + "<br>";

            }
        }

        userField.addEventListener("change", function () {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData))
        })

        messageField.addEventListener("keydown", function (event) {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("no connection");
                    return false;
                }
                if ((userField.value === "") || messageField.value === "") {
                    errorMessage("fill out user and message");
                    return false;
                } else {
                    sendMessage()
                }
                event.preventDefault();
                event.stopPropagation();
            }
        })

        document.getElementById("sendBtn").addEventListener("click", function () {
            if ((userField.value === "") || messageField.value === "") {
                errorMessage("fill out user and message");
                return false;
            } else {
                sendMessage()
            }
        })
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;
        socket.send(JSON.stringify(jsonData));
        messageField.value = "";
    }

    function errorMessage(msg) {
        notie.alert({
            type: 'error',
            text: msg,
        })
    }
</script>
</html>